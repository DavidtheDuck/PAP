name: Robotics Hub Tests
agent:
  type: Unity::VM
  image: robotics/ci-ubuntu20:v0.1.0pnp-796097
  flavor: i1.large
variables:
  PATH: /root/.local/bin:/home/bokken/bin:/home/bokken/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/sbin:/home/bokken/.npm-global/bin
commands:
  - sudo ln -s $(which python3) /usr/bin/python
  - git submodule update --init --recursive
  
  # We must remove the Demo.cs script because the System.CodeDom assembly is not in the bokken .NET sdk
  - rm ./tutorials/pick_and_place/PickAndPlaceProject/Assets/DemoScripts/Demo.*
  
  # Ensure audio is disabled. Unity built-in audio fails to initialize in our Bokken image.
  - "sed -i -e '/m_DisableAudio/ s/: .*/: 1/' ./tutorials/pick_and_place/PickAndPlaceProject/ProjectSettings/AudioManager.asset"
  - python3 -m pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple --upgrade
  - unity-downloader-cli -u 2020.3.11f1 -c editor -c StandaloneSupport-IL2CPP -c Linux --wait --published
  - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr

  # Explicitly run MessageGeneration tests first to generate dependencies
  - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 
    --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics"
    --category=MessageGeneration
  
  # Run each category of tests in its own process, in order of increasing complexity
  - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0
    --artifacts_path=test-results --suite=playmode --suite=editor --platform=Editor --category=UnitTests
  
  #  - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0
  #--artifacts_path=test-results --suite=editor --platform=Editor --testfilter BuildTests.PlayerBuilder.BuildPlayerLinux
  
  - python3 .yamato/PickAndPlaceTests/set-up-integration-tests.py

  # Run Pick and Place Test
  # NOTE: Simply specifying the testCategory is not enough to get a test marked with [Explicit] to run
  # TODO: Determine how best to capture ROS logging as test artifacts
  # TODO: Determine when it would be prudent to run BuildTests and add them here or in a new config
  - |
    /bin/bash .yamato/PickAndPlaceTests/ros.bash build_pick_and_place
    /bin/bash .yamato/PickAndPlaceTests/ros.bash start_pick_and_place & 
    export PID=$!
    utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.PickAndPlaceIntegrationTests
    /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros1 $PID

  # Run ROS1 Integration Tests
  # This step requires to execute set-up-integration-tests.py
  - |
    export ROS_DISTRO=noetic
    /bin/bash .yamato/PickAndPlaceTests/ros.bash build_ros ros1
    /bin/bash .yamato/PickAndPlaceTests/ros.bash start_ros ros1 &
    export PID=$!
    sleep 10  # Wait for ROS endpoint to stand up
    
    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_position_service ros1 &
    export POSITION_SERVICE_PID=$!
    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_color_publisher ros1 &
    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_pose_service_client ros1 &
    
    utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests
    
    /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros1 $POSITION_SERVICE_PID
    /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros1 $PID

  # Install ROS2 foxy
  # TODO: move this part to image builder
  - |
    curl http://repo.ros2.org/repos.key | sudo apt-key add -
    sudo apt update && sudo apt install -y curl gnupg2 lsb-release
    sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
    sudo apt update && sudo apt install -y ros-foxy-ros-base python3-colcon-common-extensions

  # Run ROS2 Integration Tests
  # This step requires to execute set-up-integration-tests.py
  - |
    export ROS_DISTRO=foxy
    /bin/bash .yamato/PickAndPlaceTests/ros.bash build_ros ros2
    /bin/bash .yamato/PickAndPlaceTests/ros.bash start_ros ros2 &
    export PID=$!
    sleep 10  # Wait for ROS endpoint to stand up

    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_position_service ros2 &
    export POSITION_SERVICE_PID=$!
    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_color_publisher ros2 &
    /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_pose_service_client ros2 &

    export ROS_PROTOCOL=ROS2
    utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests
    
    /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros2 $POSITION_SERVICE_PID
    /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros2 $PID

triggers:
  cancel_old_ci: true
  expression: |
    (pull_request.target in ["main", "dev"] AND
    NOT pull_request.changes.all match ["**/*.md","**/*.jpg","**/*.jpeg","**/*.gif","**/*.pdf"])
artifacts:
  logs:
    paths:
      - "test-results/**/*"
